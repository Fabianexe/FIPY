import plotly.graph_objs as go
from math import inf as infinity
import re

a_path = [
    ('M', 1, 0),
    ('L', 0.7813370474, 0),
    ('L', 0.6949860724, 0.2276536313),
    ('L', 0.295264624, 0.2276536313),
    ('L', 0.213091922, 0.0),
    ('L', 0.0, 0.0),
    ('L', 0.3885793872, 1.0),
    ('L', 0.6016713092, 1.0),
    ('L', 1.0, 0.0),
    'Z',
    ('M', 0.6295264624, 0.3952513967),
    ('L', 0.4930362117, 0.7667597765),
    ('L', 0.3579387187, 0.3952513967),
    ('L', 0.6295264624, 0.3952513967),
    'Z',
]
c_path = [
    ('M', 0.7756410256410257, 0.37162162162162166), ('L', 1.0, 0.3121621621621622),
    ('C', 0.9647435897435898, 0.20675675675675675, 0.908653846153846, 0.12837837837837837, 0.8285256410256409,
     0.07702702702702702),
    ('C', 0.7483974358974359, 0.025675675675675674, 0.6458333333333334, 0.0, 0.5240384615384616, 0.0),
    ('C', 0.37019230769230776, 0.0, 0.24519230769230774, 0.043243243243243246, 0.14743589743589747,
     0.13108108108108107),
    ('C', 0.049679487179487176, 0.21891891891891893, 0.0, 0.3391891891891892, 0.0, 0.49189189189189186),
    ('C', 0.0, 0.6527027027027027, 0.049679487179487176, 0.777027027027027, 0.14903846153846156, 0.8662162162162163),
    ('C', 0.24679487179487183, 0.9554054054054054, 0.3766025641025641, 1.0, 0.5368589743589743, 1.0),
    ('C', 0.6778846153846154, 1.0, 0.7916666666666667, 0.9648648648648648, 0.8798076923076922, 0.8945945945945947),
    ('C', 0.9310897435897435, 0.8540540540540541, 0.9711538461538461, 0.7945945945945946, 0.9967948717948718,
     0.7175675675675676),
    ('L', 0.7676282051282052, 0.6702702702702703),
    ('C', 0.7532051282051283, 0.7202702702702704, 0.7259615384615384, 0.7608108108108109, 0.6826923076923077,
     0.7891891891891891),
    ('C', 0.639423076923077, 0.8189189189189189, 0.5865384615384616, 0.8324324324324325, 0.5256410256410257,
     0.8324324324324325),
    ('C', 0.44070512820512825, 0.8324324324324325, 0.37179487179487186, 0.8067567567567567, 0.31891025641025644,
     0.7554054054054055),
    ('C', 0.26602564102564097, 0.7040540540540541, 0.23878205128205132, 0.6216216216216216, 0.23878205128205132,
     0.5054054054054055),
    ('C', 0.23878205128205132, 0.3837837837837838, 0.26602564102564097, 0.295945945945946, 0.31730769230769235,
     0.24459459459459462),
    ('C', 0.37019230769230776, 0.19324324324324327, 0.43750000000000006, 0.1662162162162162, 0.5208333333333334,
     0.1662162162162162),
    ('C', 0.5817307692307692, 0.1662162162162162, 0.6362179487179488, 0.1837837837837838, 0.6794871794871795,
     0.21621621621621623),
    ('C', 0.7243589743589743, 0.24864864864864863, 0.7564102564102565, 0.3013513513513514, 0.7756410256410257,
     0.37162162162162166)
]

g_path = [('M', 0.5351270553064276, 0.37162162162162166), ('L', 0.5351270553064276, 0.5351351351351352),
          ('L', 1.0, 0.5351351351351352), ('L', 1.0, 0.15), (
          'C', 0.9551569506726458, 0.10945945945945947, 0.8893871449925262, 0.07567567567567567, 0.804185351270553,
          0.0445945945945946),
          ('C', 0.7174887892376683, 0.014864864864864864, 0.6307922272047833, 0.0, 0.5426008968609866, 0.0), (
          'C', 0.430493273542601, 0.0, 0.3333333333333334, 0.02027027027027027, 0.24962630792227206,
          0.06351351351351352), (
          'C', 0.1674140508221226, 0.10540540540540541, 0.10463378176382661, 0.1662162162162162, 0.06278026905829596,
          0.245945945945946),
          ('C', 0.02092675635276532, 0.32432432432432434, 0.0, 0.4108108108108108, 0.0, 0.5027027027027027), (
          'C', 0.0, 0.6040540540540541, 0.022421524663677132, 0.6932432432432433, 0.07025411061285501,
          0.7716216216216217), (
          'C', 0.1165919282511211, 0.85, 0.18535127055306427, 0.9094594594594595, 0.27503736920777283,
          0.9513513513513513),
          ('C', 0.3437967115097161, 0.9837837837837837, 0.4289985052316892, 1.0, 0.5306427503736922, 1.0), (
          'C', 0.6636771300448431, 1.0, 0.7683109118086697, 0.9743243243243243, 0.8430493273542601, 0.9243243243243244),
          ('C', 0.9177877428998507, 0.8743243243243244, 0.9656203288490284, 0.8040540540540541, 0.9865470852017937,
           0.7162162162162162), ('L', 0.7713004484304932, 0.6797297297297298), (
          'C', 0.7563527653213753, 0.727027027027027, 0.727952167414051, 0.7648648648648649, 0.687593423019432,
          0.7918918918918919), (
          'C', 0.6457399103139014, 0.8189189189189189, 0.5934230194319882, 0.8324324324324325, 0.5306427503736922,
          0.8324324324324325), (
          'C', 0.43647234678624824, 0.8324324324324325, 0.3617339312406577, 0.8054054054054054, 0.30642750373692085,
          0.7513513513513514), (
          'C', 0.24962630792227206, 0.6972972972972973, 0.22272047832585956, 0.6175675675675676, 0.22272047832585956,
          0.5108108108108108), (
          'C', 0.22272047832585956, 0.395945945945946, 0.25112107623318386, 0.3108108108108108, 0.30642750373692085,
          0.25270270270270273), (
          'C', 0.36322869955156956, 0.19594594594594597, 0.43796711509716, 0.1662162162162162, 0.5291479820627804,
          0.1662162162162162), (
          'C', 0.5739910313901346, 0.1662162162162162, 0.6188340807174889, 0.17432432432432432, 0.665171898355755,
          0.19054054054054056), (
          'C', 0.7100149476831092, 0.20675675675675675, 0.7488789237668162, 0.2256756756756757, 0.7817638266068759,
          0.24864864864864863), ('L', 0.7817638266068759, 0.37162162162162166),
          ('L', 0.5351270553064276, 0.37162162162162166)]
u_path = [('M', 0.0, 1.0), ('L', 0.2521891418563923, 1.0), ('L', 0.2521891418563923, 0.4670329670329671), (
            'C', 0.2521891418563923, 0.38324175824175827, 0.25569176882662, 0.32829670329670335, 0.2626970227670753,
            0.30219780219780223), (
          'C', 0.27320490367775835, 0.2623626373626374, 0.2994746059544658, 0.23076923076923078, 0.339754816112084,
          0.2060439560439561), (
          'C', 0.3800350262697022, 0.18131868131868134, 0.43607705779334494, 0.16895604395604397, 0.5061295971978983,
          0.16895604395604397), (
          'C', 0.5779334500875657, 0.16895604395604397, 0.6322241681260945, 0.18131868131868134, 0.669001751313485,
          0.20329670329670332), (
          'C', 0.7057793345008755, 0.22664835164835168, 0.7267950963222416, 0.2554945054945055, 0.7355516637478108,
          0.2884615384615385), (
          'C', 0.7425569176882661, 0.3228021978021978, 0.7460595446584938, 0.3777472527472528, 0.7460595446584938,
          0.4560439560439561), ('L', 0.7460595446584938, 1.0), ('L', 1.0, 1.0), ('L', 1.0, 0.4835164835164836), (
          'C', 1.0, 0.3653846153846154, 0.9929947460595446, 0.28159340659340665, 0.978984238178634,
          0.23351648351648355), (
          'C', 0.9649737302977233, 0.18406593406593408, 0.9404553415061295, 0.14285714285714285, 0.903677758318739,
          0.1098901098901099), (
          'C', 0.8669001751313483, 0.07554945054945054, 0.8178633975481611, 0.049450549450549455, 0.754816112084063,
          0.03021978021978022),
          ('C', 0.6935201401050788, 0.009615384615384616, 0.6129597197898423, 0.0, 0.5148861646234675, 0.0), (
          'C', 0.3940455341506129, 0.0, 0.3047285464098073, 0.01098901098901099, 0.24168126094570927,
          0.03159340659340659), (
          'C', 0.180385288966725, 0.053571428571428575, 0.13134851138353765, 0.08241758241758242, 0.09457092819614711,
          0.11675824175824175), (
          'C', 0.0595446584938704, 0.15109890109890112, 0.03502626970227671, 0.1881868131868132, 0.02451838879159369,
          0.22527472527472528),
          ('C', 0.007005253940455347, 0.28159340659340665, 0.0, 0.3653846153846154, 0.0, 0.4752747252747253),
          ('L', 0.0, 1.0)]


def normalize_path(wild_path):
    min_x = infinity
    max_x = -infinity
    min_y = infinity
    max_y = -infinity
    
    for move in wild_path:
        if move[0] == 'M' or move[0] == 'L':
            min_x = min(min_x, move[1])
            max_x = max(max_x, move[1])
            min_y = min(min_y, move[2])
            max_y = max(max_y, move[2])
        if move[0] == 'C':
            min_x = min(min_x, move[5])
            max_x = max(max_x, move[5])
            min_y = min(min_y, move[6])
            max_y = max(max_y, move[6])
    diff_x = max_x - min_x
    diff_y = max_y - min_y
    print(min_x, max_x, diff_x)
    print(min_y, max_y, diff_y)
    new_path = []
    for move in wild_path:
        if move[0] == 'M' or move[0] == 'L':
            new_path.append((move[0], (move[1] - min_x) / diff_x, (move[2] - min_y) / diff_y))
        elif move[0] == 'C':
            new_path.append((move[0], (move[1] - min_x) / diff_x, (move[2] - min_y) / diff_y,
                             (move[3] - min_x) / diff_x, (move[4] - min_y) / diff_y,
                             (move[5] - min_x) / diff_x, (move[6] - min_y) / diff_y))
        else:
            new_path.append(move)
    return new_path


def read_string(string_path):
    matches = re.findall(
        r'([MLZC])(?:(-?\d+\.?\d*),(-?\d+\.?\d*))?(?: (-?\d+\.?\d*),(-?\d+\.?\d*) (-?\d+\.?\d*),(-?\d+\.?\d*))?',
        string_path)
    ret = []
    for match in matches:
        if match[0] == 'M' or match[0] == 'L':
            ret.append((match[0], float(match[1]), -float(match[2])))
        elif match[0] == 'C':
            ret.append((match[0], float(match[1]), -float(match[2]), float(match[3]), -float(match[4]), float(match[5]),
                        -float(match[6])))
    return ret


def create_svg(path, x, x_size, y, y_size, color):
    ret = ''
    for move in path:
        if move[0] == 'M':
            ret += 'M'
            ret += str(x + x_size * move[1])
            ret += ','
            ret += str(y + y_size * move[2])
        elif move[0] == 'L':
            ret += 'L'
            ret += str(x + x_size * move[1])
            ret += ','
            ret += str(y + y_size * move[2])
        elif move[0] == 'Z':
            ret += 'Z'
        elif move[0] == 'C':
            ret += 'C'
            ret += str(x + x_size * move[1])
            ret += ','
            ret += str(y + y_size * move[2])
            ret += ' '
            ret += str(x + x_size * move[3])
            ret += ','
            ret += str(y + y_size * move[4])
            ret += ' '
            ret += str(x + x_size * move[5])
            ret += ','
            ret += str(y + y_size * move[6])
    return go.layout.Shape(
        type="path",
        path=ret,
        fillcolor=color,
        line_color=color,
        opacity=1,
        layer="below",
    )


def get_nuc(nuc, x, x_size, y, y_size, color):
    if nuc == 'A':
        return create_svg(a_path, x, x_size, y, y_size, color)
    if nuc == 'C':
        return create_svg(c_path, x, x_size, y, y_size, color)
    if nuc == 'G':
        return create_svg(g_path, x, x_size, y, y_size, color)
    if nuc == 'U':
        return create_svg(u_path, x, x_size, y, y_size, color)


if __name__ == '__main__':
    import sys
    s = sys.argv[1]
    path_list = read_string(s)
    normal = normalize_path(path_list)
    print(normal)
